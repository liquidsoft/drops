{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/d/auto-bind.js","node_modules/d/index.js","node_modules/es5-ext/array/#/clear.js","node_modules/es5-ext/function/is-arguments.js","node_modules/es5-ext/object/_iterate.js","node_modules/es5-ext/object/assign/index.js","node_modules/es5-ext/object/assign/is-implemented.js","node_modules/es5-ext/object/assign/shim.js","node_modules/es5-ext/object/copy.js","node_modules/es5-ext/object/create.js","node_modules/es5-ext/object/for-each.js","node_modules/es5-ext/object/is-callable.js","node_modules/es5-ext/object/is-object.js","node_modules/es5-ext/object/keys/index.js","node_modules/es5-ext/object/keys/is-implemented.js","node_modules/es5-ext/object/keys/shim.js","node_modules/es5-ext/object/map.js","node_modules/es5-ext/object/normalize-options.js","node_modules/es5-ext/object/set-prototype-of/index.js","node_modules/es5-ext/object/set-prototype-of/is-implemented.js","node_modules/es5-ext/object/set-prototype-of/shim.js","node_modules/es5-ext/object/valid-callable.js","node_modules/es5-ext/object/valid-object.js","node_modules/es5-ext/object/valid-value.js","node_modules/es5-ext/string/#/contains/index.js","node_modules/es5-ext/string/#/contains/is-implemented.js","node_modules/es5-ext/string/#/contains/shim.js","node_modules/es5-ext/string/is-string.js","node_modules/es5-ext/string/random-uniq.js","node_modules/es6-iterator/array.js","node_modules/es6-iterator/for-of.js","node_modules/es6-iterator/get.js","node_modules/es6-iterator/index.js","node_modules/es6-iterator/is-iterable.js","node_modules/es6-iterator/string.js","node_modules/es6-iterator/valid-iterable.js","node_modules/es6-symbol/index.js","node_modules/es6-symbol/is-implemented.js","node_modules/es6-symbol/is-symbol.js","node_modules/es6-symbol/polyfill.js","node_modules/es6-symbol/validate-symbol.js","node_modules/es6-weak-map/index.js","node_modules/es6-weak-map/is-implemented.js","node_modules/es6-weak-map/is-native-implemented.js","node_modules/es6-weak-map/polyfill.js","node_modules/object-assign/index.js","src/js/Field.js","src/js/Select.js","src/js/src/js/index.js","src/js/manager.js","src/js/symbols.js","src/js/utils.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACffA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjtHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;qjBC1FA;;;;;;;;;AASA;;;;AACA;;IAAY,O;;AACZ;;;;;;;;IAEqB,K;;AAEjB;;;;;;AAOA,mBAAY,KAAZ,EAAiC;AAAA,YAAd,OAAc,uEAAJ,EAAI;;AAAA;;AAC7B,aAAK,QAAL,GAAgB,EAAhB;AACA,aAAK,QAAL,CAAc,KAAd,GAAsB,KAAtB;;AAEA;AACA,aAAK,QAAQ,iBAAb,EAAgC,OAAhC;AACA,aAAK,QAAQ,cAAb;AACA,aAAK,QAAQ,eAAb;AACA,aAAK,QAAQ,gBAAb;AACH;;;aAEA,QAAQ,iB;8BAAmB,O,EAAS;AACjC,iBAAK,OAAL,GAAe,4BAAO;AAClB,6BAAa,KAAK,QAAL,CAAc,KAAd,CAAoB,WAApB,IAAmC,EAD9B;;AAGlB,4BAHkB,wBAGL,KAHK,EAGE,KAHF,EAGS;AACvB,2BAAO,KAAP;AACH,iBALiB;AAOlB,8BAPkB,0BAOH,KAPG,EAOI,WAPJ,EAOiB;AAC/B,2BAAO,WAAP;AACH,iBATiB;AAWlB,wBAXkB,oBAWT,KAXS,EAWF;AACZ,2BAAO,EAAP;AACH;AAbiB,aAAP,EAeZ,OAfY,CAAf;AAgBH;;aAEA,QAAQ,c;gCAAkB;AACvB;AACA,iBAAK,QAAL,CAAc,KAAd,CAAoB,KAApB,CAA0B,OAA1B,GAAoC,MAApC;;AAEA;AACA;AACA;;AAEA,iBAAK,QAAL,CAAc,OAAd,GAAwB,SAAS,aAAT,CAAuB,KAAvB,CAAxB;AACA,iBAAK,QAAL,CAAc,OAAd,CAAsB,SAAtB,GAAkC,WAAW,KAAK,QAAL,CAAc,KAAd,CAAoB,SAAjE;;AAEA;AACA;AACA;;AAEA,iBAAK,QAAL,CAAc,IAAd,GAAqB,SAAS,aAAT,CAAuB,KAAvB,CAArB;AACA,iBAAK,QAAL,CAAc,IAAd,CAAmB,SAAnB,GAA+B,YAA/B;AACA,iBAAK,QAAL,CAAc,OAAd,CAAsB,WAAtB,CAAkC,KAAK,QAAL,CAAc,IAAhD;;AAEA,iBAAK,QAAL,CAAc,KAAd,GAAsB,SAAS,aAAT,CAAuB,KAAvB,CAAtB;AACA,iBAAK,QAAL,CAAc,KAAd,CAAoB,SAApB,GAAgC,aAAhC;AACA,iBAAK,QAAL,CAAc,KAAd,CAAoB,SAApB,GAAgC,KAAK,OAAL,CAAa,QAAb,CAAsB,IAAtB,CAAhC;AACA,iBAAK,QAAL,CAAc,IAAd,CAAmB,WAAnB,CAA+B,KAAK,QAAL,CAAc,KAA7C;;AAGA,iBAAK,QAAL,CAAc,WAAd,GAA4B,SAAS,aAAT,CAAuB,KAAvB,CAA5B;AACA,iBAAK,QAAL,CAAc,WAAd,CAA0B,SAA1B,GAAsC,mBAAtC;AACA,iBAAK,QAAL,CAAc,WAAd,CAA0B,SAA1B,GAAsC,KAAK,OAAL,CAAa,cAAb,CAA4B,IAA5B,EAAkC,KAAK,OAAL,CAAa,WAA/C,CAAtC;AACA,iBAAK,QAAL,CAAc,IAAd,CAAmB,WAAnB,CAA+B,KAAK,QAAL,CAAc,WAA7C;;AAEA,iBAAK,QAAL,CAAc,SAAd,GAA0B,SAAS,aAAT,CAAuB,KAAvB,CAA1B;AACA,iBAAK,QAAL,CAAc,SAAd,CAAwB,SAAxB,GAAoC,iBAApC;AACA,iBAAK,QAAL,CAAc,IAAd,CAAmB,WAAnB,CAA+B,KAAK,QAAL,CAAc,SAA7C;;AAEA;AACA;AACA;;AAEA,iBAAK,QAAL,CAAc,IAAd,GAAqB,SAAS,aAAT,CAAuB,KAAvB,CAArB;AACA,iBAAK,QAAL,CAAc,IAAd,CAAmB,SAAnB,GAA+B,YAA/B;AACA,iBAAK,QAAL,CAAc,OAAd,CAAsB,WAAtB,CAAkC,KAAK,QAAL,CAAc,IAAhD;;AAEA;AACA;AACA;;AAEA,gBAAI,KAAK,QAAL,CAAc,KAAd,CAAoB,QAAxB,EAAkC;AAC9B,qBAAK,OAAL;AACH;;AAED;AACA,gBAAI,KAAK,QAAL,CAAc,KAAd,CAAoB,WAAxB,EAAqC;AACjC,qBAAK,QAAL,CAAc,KAAd,CAAoB,UAApB,CAA+B,YAA/B,CAA4C,KAAK,QAAL,CAAc,OAA1D,EAAmE,KAAK,QAAL,CAAc,KAAd,CAAoB,WAAvF;AACH,aAFD,MAGK;AACD,qBAAK,QAAL,CAAc,KAAd,CAAoB,UAApB,CAA+B,WAA/B,CAA2C,KAAK,QAAL,CAAc,OAAzD;AACH;AACJ;;aAEA,QAAQ,e;gCAAmB;AACxB,iBAAK,QAAQ,YAAb,EAA2B,KAAK,GAAL,EAA3B;AACH;;aAEA,QAAQ,gB;gCAAoB;AAAA;;AAEzB;AACA;AACA;;AAEA,iBAAK,QAAL,CAAc,IAAd,CAAmB,gBAAnB,CAAoC,OAApC,EAA6C,YAAM;AAC/C,sBAAK,MAAL;AACH,aAFD;;AAIA;AACA;AACA;;AAEA,mBAAO,gBAAP,CAAwB,OAAxB,EAAiC,UAAC,CAAD,EAAO;AACpC,oBAAK,MAAK,QAAL,CAAc,OAAd,IAAyB,EAAE,MAA5B,IAAuC,CAAC,MAAK,QAAL,CAAc,OAAd,CAAsB,QAAtB,CAA+B,EAAE,MAAjC,CAA5C,EAAsF;AAClF,0BAAK,KAAL;AACH;AACJ,aAJD;AAMH;;AAED;;;;;;;;+BAcqB;AAAA;;AAAA,gBAAhB,MAAgB,uEAAP,KAAO;;AACjB,gBAAI,KAAK,MAAL,IAAe,KAAK,QAAxB,EAAkC;AAC9B,uBAAO,IAAP;AACH;;AAED,iBAAK,QAAL,CAAc,OAAd,CAAsB,SAAtB,IAAmC,aAAnC;;AAEA;AACA,gBAAI,UAAU,KAAd,EAAqB;AACjB,qBAAK,OAAL,CAAa,MAAb,EAAqB,IAArB;;AAEA;AACA,uCAAW,KAAK,QAAL,CAAc,IAAzB,EAA+B,eAA/B,EAAgD,YAAM;AAClD,2BAAK,OAAL,CAAa,QAAb;AACH,iBAFD;AAGH;;AAED,mBAAO,IAAP;AACH;;;gCAEqB;AAAA;;AAAA,gBAAhB,MAAgB,uEAAP,KAAO;;AAClB,gBAAI,KAAK,MAAL,IAAe,KAAK,QAAxB,EAAkC;AAC9B,uBAAO,IAAP;AACH;;AAED,gBAAI,YAAY,KAAK,QAAL,CAAc,OAAd,CAAsB,SAAtB,CAAgC,KAAhC,CAAsC,GAAtC,CAAhB;AAAA,gBACI,aAAa,UAAU,OAAV,CAAkB,YAAlB,CADjB;;AAGA,sBAAU,MAAV,CAAiB,UAAjB,EAA6B,CAA7B;AACA,iBAAK,QAAL,CAAc,OAAd,CAAsB,SAAtB,GAAkC,UAAU,IAAV,CAAe,GAAf,CAAlC;;AAEA;AACA,gBAAI,UAAU,KAAd,EAAqB;AACjB,qBAAK,OAAL,CAAa,OAAb,EAAsB,IAAtB;;AAEA;AACA,uCAAW,KAAK,QAAL,CAAc,IAAzB,EAA+B,eAA/B,EAAgD,YAAM;AAClD,2BAAK,OAAL,CAAa,QAAb;AACH,iBAFD;AAGH;;AAED,mBAAO,IAAP;AACH;;;iCAEQ;AACL,mBAAO,KAAK,MAAL,GAAc,KAAK,KAAL,EAAd,GAA6B,KAAK,IAAL,EAApC;AACH;;AAED;;;;;;;aAMC,QAAQ,Y;8BAAc,M,EAAO;AAC1B;AACA,gBAAK,UAAS,IAAV,IAAoB,OAAM,MAAN,KAAiB,CAAzC,EAA6C;AACzC,uBAAO,KAAK,QAAQ,cAAb,GAAP;AACH;;AAED;AACA,iBAAK,QAAL,CAAc,SAAd,CAAwB,SAAxB,GAAoC,KAAK,OAAL,CAAa,YAAb,CAA0B,IAA1B,EAAgC,MAAhC,CAApC;AACA,iBAAK,QAAL,CAAc,OAAd,CAAsB,SAAtB,IAAmC,sBAAnC;;AAEA,mBAAO,IAAP;AACH;;aAEA,QAAQ,c;gCAAkB;AACvB,gBAAI,YAAY,KAAK,QAAL,CAAc,OAAd,CAAsB,SAAtB,CAAgC,KAAhC,CAAsC,GAAtC,CAAhB;AAAA,gBACI,aAAa,UAAU,OAAV,CAAkB,qBAAlB,CADjB;;AAGA,gBAAI,aAAa,CAAC,CAAlB,EAAqB;AACjB,0BAAU,MAAV,CAAiB,UAAjB,EAA6B,CAA7B;AACA,qBAAK,QAAL,CAAc,OAAd,CAAsB,SAAtB,GAAkC,UAAU,IAAV,CAAe,GAAf,CAAlC;AACH;;AAED,mBAAO,IAAP;AACH;;AAED;;;;;;;;iCAcuB;AAAA,gBAAhB,MAAgB,uEAAP,KAAO;;AACnB,gBAAI,KAAK,OAAT,EAAkB;AACd,uBAAO,IAAP;AACH;;AAED,gBAAI,YAAY,KAAK,QAAL,CAAc,OAAd,CAAsB,SAAtB,CAAgC,KAAhC,CAAsC,GAAtC,CAAhB;AAAA,gBACI,gBAAgB,UAAU,OAAV,CAAkB,gBAAlB,CADpB;;AAGA,sBAAU,MAAV,CAAiB,aAAjB,EAAgC,CAAhC;;AAEA,iBAAK,QAAL,CAAc,OAAd,CAAsB,SAAtB,GAAkC,UAAU,IAAV,CAAe,GAAf,CAAlC;;AAEA;AACA,gBAAI,UAAU,KAAd,EAAqB;AACjB,qBAAK,OAAL,CAAa,QAAb,EAAuB,IAAvB;AACH;;AAED,mBAAO,IAAP;AACH;;;kCAEuB;AAAA,gBAAhB,MAAgB,uEAAP,KAAO;;AACpB,gBAAI,KAAK,QAAT,EAAmB;AACf,uBAAO,IAAP;AACH;;AAED,iBAAK,QAAL,CAAc,OAAd,CAAsB,SAAtB,IAAmC,iBAAnC;;AAEA,gBAAI,UAAU,KAAd,EAAqB;AACjB,qBAAK,OAAL,CAAa,SAAb,EAAwB,IAAxB;AACH;;AAED,mBAAO,IAAP;AACH;;AAED;;;;;;;aAMC,QAAQ,Q;gCAAY;AACjB,mBAAO,KAAK,QAAL,CAAc,KAAd,CAAoB,KAA3B;AACH;;aAEA,QAAQ,Q;8BAAU,O,EAAO;AACtB,gBAAI,KAAK,GAAL,OAAe,OAAnB,EAA0B;AACtB,uBAAO,KAAP;AACH;;AAED,iBAAK,QAAL,CAAc,KAAd,CAAoB,KAApB,GAA4B,WAAS,EAArC;AACA,mBAAO,IAAP;AACH;;;8BAEK;AACF,mBAAO,KAAK,QAAQ,QAAb,GAAP;AACH;;;4BAEG,K,EAAuB;AAAA,gBAAhB,MAAgB,uEAAP,KAAO;;AACvB,gBAAI,KAAK,QAAQ,QAAb,EAAuB,KAAvB,CAAJ,EAAmC;AAC/B,qBAAK,QAAQ,YAAb,EAA2B,KAAK,GAAL,EAA3B;;AAEA,oBAAI,CAAC,MAAL,EAAa;AACT,yBAAK,OAAL,CAAa,QAAb,EAAuB,IAAvB;AACH;AACJ;;AAED,mBAAO,IAAP;AACH;;AAED;;;;;;;;2BAMG,S,EAAW,Q,EAAU;AACpB,iBAAK,QAAL,CAAc,KAAd,CAAoB,gBAApB,CAAqC,SAArC,EAAgD,QAAhD;AACA,mBAAO,IAAP;AACH;;;4BAEG,S,EAAW,Q,EAAU;AACrB,iBAAK,QAAL,CAAc,KAAd,CAAoB,mBAApB,CAAwC,SAAxC,EAAmD,QAAnD;AACA,mBAAO,IAAP;AACH;;;gCAEO,S,EAAsB;AAAA,gBAAX,IAAW,uEAAJ,EAAI;;AAC1B,gBAAI,QAAQ,IAAI,KAAJ,CAAU,SAAV,EAAqB,IAArB,CAAZ;AACA,iBAAK,QAAL,CAAc,KAAd,CAAoB,aAApB,CAAkC,KAAlC;AACA,mBAAO,IAAP;AACH;;;4BA9LY;AACT,mBAAO,KAAK,QAAL,CAAc,OAAd,CAAsB,SAAtB,CAAgC,OAAhC,CAAwC,YAAxC,IAAwD,CAAC,CAAhE;AACH;;;4BAEY;AACT,mBAAO,CAAC,KAAK,MAAb;AACH;;;4BAuFc;AACX,mBAAO,KAAK,QAAL,CAAc,OAAd,CAAsB,SAAtB,CAAgC,OAAhC,CAAwC,gBAAxC,IAA4D,CAAC,CAApE;AACH;;;4BAEa;AACV,mBAAO,CAAC,KAAK,QAAb;AACH;;;;;;kBArOgB,K;;;;;;;;;;;;;ACJrB;;;;AACA;;;;AACA;;IAAY,O;;AACZ;;AACA;;;;;;;;;;;;+eAbA;;;;;;;;;AAeA;;IAEqB,W;;;AAEjB;;;;;;AAMA,yBAAY,KAAZ,EAAiC;AAAA,YAAd,OAAc,uEAAJ,EAAI;;AAAA;;AAC7B,YAAI,MAAM,QAAN,CAAe,WAAf,OAAiC,QAArC,EAA+C;AAC3C,kBAAM,IAAI,KAAJ,CAAU,wDAAV,CAAN;AACA;AACH;;AAJ4B,yHAMvB,KANuB,EAMhB,OANgB;AAOhC;;;aAEA,QAAQ,iB;8BAAmB,O,EAAS;AACjC,kGAAM,QAAQ,iBAAd,mBAAiC,OAAjC;;AAEA,iBAAK,OAAL,GAAe,4BAAO,KAAK,OAAZ,EAAqB;AAChC,6BAAa,KAAK,QAAL,CAAc,KAAd,CAAoB,OAApB,CAA4B,WAA5B,IAA2C,EADxB;;AAGhC;AACA,8BAAc,IAJkB;AAKhC,kCAAkB,mBALc;AAMhC,+BAAe,GANiB;AAOhC,qBAPgC,iBAO1B,KAP0B,EAOnB,OAPmB,EAOV,MAPU,EAOH;AACzB;AACA,4BAAQ,OAAR,CAAgB,UAAC,MAAD,EAAY;AACxB,+BAAO,KAAP,CAAa,OAAb,GAAuB,OAAO,OAAP,CAAe,KAAf,CAAqB,OAArB,CAA6B,MAA7B,MAAwC,CAAxC,GACnB,OADmB,GACT,MADd;AAEH,qBAHD;AAIH,iBAb+B;;;AAehC;AACA,4BAhBgC,wBAgBnB,KAhBmB,EAgBZ,KAhBY,EAgBL;AACvB,wBAAI,OAAO,MAAM,aAAN,CAAoB,KAApB,CAAX;AACA,2BAAO,OAAO,KAAK,KAAZ,GAAoB,EAA3B;AACH,iBAnB+B;;;AAqBhC;AACA,yBAtBgC,qBAsBtB,IAtBsB,EAsBhB;AACZ,2BAAO,KAAK,KAAZ;AACH;AAxB+B,aAArB,EA0BZ,OA1BY,CAAf;AA2BH;;aAEA,QAAQ,c;gCAAkB;AACvB,kGAAM,QAAQ,cAAd;;AAEA;AACA;AACA;;AAEA,iBAAK,QAAL,CAAc,OAAd,CAAsB,SAAtB,IAAmC,eAAnC;;AAEA;AACA;AACA;;AAEA,gBAAI,KAAK,OAAL,CAAa,YAAjB,EAA+B;AAC3B,qBAAK,QAAL,CAAc,KAAd,GAAsB,SAAS,aAAT,CAAuB,KAAvB,CAAtB;AACA,qBAAK,QAAL,CAAc,KAAd,CAAoB,SAApB,GAAgC,aAAhC;AACA,qBAAK,QAAL,CAAc,IAAd,CAAmB,WAAnB,CAA+B,KAAK,QAAL,CAAc,KAA7C;;AAEA,qBAAK,QAAL,CAAc,UAAd,GAA2B,SAAS,aAAT,CAAuB,OAAvB,CAA3B;AACA,qBAAK,QAAL,CAAc,UAAd,CAAyB,IAAzB,GAAgC,MAAhC;AACA,qBAAK,QAAL,CAAc,UAAd,CAAyB,WAAzB,GAAuC,KAAK,OAAL,CAAa,gBAApD;AACA,qBAAK,QAAL,CAAc,KAAd,CAAoB,WAApB,CAAgC,KAAK,QAAL,CAAc,UAA9C;AACH;;AAED;AACA;AACA;;AAEA,iBAAK,QAAL,CAAc,OAAd,GAAwB,SAAS,aAAT,CAAuB,KAAvB,CAAxB;AACA,iBAAK,QAAL,CAAc,OAAd,CAAsB,SAAtB,GAAkC,eAAlC;AACA,iBAAK,QAAL,CAAc,IAAd,CAAmB,WAAnB,CAA+B,KAAK,QAAL,CAAc,OAA7C;AACH;;aAEA,QAAQ,e;gCAAmB;AACxB,gBAAI,UAAU,EAAd;;AAEA,kBAAM,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,KAAK,QAAL,CAAc,KAAd,CAAoB,OAA/C,EAAwD,OAAxD,CAAgE,UAAC,MAAD,EAAY;AACxE,wBAAQ,IAAR,CAAa;AACT,2BAAO,OAAO,KADL;AAET,2BAAO,OAAO,SAFL;AAGT,8BAAU,OAAO;AAHR,iBAAb;AAKH,aAND;;AAQA,iBAAK,UAAL,CAAgB,OAAhB,EAAyB,IAAzB;AACH;;aAEA,QAAQ,gB;gCAAoB;AAAA;;AACzB,kGAAM,QAAQ,gBAAd;;AAEA;AACA;AACA;;AAEA,iBAAK,QAAL,CAAc,OAAd,CAAsB,gBAAtB,CAAuC,OAAvC,EAAgD,UAAC,CAAD,EAAO;AACnD,oBAAI,EAAE,MAAF,CAAS,SAAT,CAAmB,OAAnB,CAA2B,cAA3B,IAA6C,CAAC,CAAlD,EAAqD;AACjD,2BAAK,GAAL,CAAS,EAAE,MAAF,CAAS,OAAT,CAAiB,KAA1B;AACA,2BAAK,KAAL;AACH;AACJ,aALD;;AAOA;AACA;AACA;;AAEA,gBAAI,KAAK,QAAL,CAAc,UAAlB,EAA8B;;AAE1B;AACA,qBAAK,QAAL,CAAc,UAAd,CAAyB,gBAAzB,CAA0C,OAA1C,EAAmD,qBAAS,KAAK,OAAL,CAAa,aAAtB,EAAqC,YAAM;AAC1F,2BAAK,OAAL,CAAa,KAAb,SAEI,OAAK,QAAL,CAAc,OAAd,CAAsB,gBAAtB,CAAuC,eAAvC,CAFJ,EAGI,OAAK,QAAL,CAAc,UAAd,CAAyB,KAH7B;AAKH,iBANkD,CAAnD;;AAQA;AACA,qBAAK,EAAL,CAAQ,QAAR,EAAkB,YAAM;AACpB,2BAAK,QAAL,CAAc,UAAd,CAAyB,KAAzB;AACH,iBAFD;AAGH;AACJ;;AAED;;;;;;;;sCAMc,K,EAAO;AACjB,gBAAI,SAAS,KAAK,QAAL,CAAc,OAAd,CAAsB,aAAtB,gCAAiE,KAAjE,QAAb;AACA,mBAAO,SAAS,OAAO,OAAhB,GAA0B,IAAjC;AACH;;;mCAEU,O,EAAyB;AAAA;;AAAA,gBAAhB,MAAgB,uEAAP,KAAO;;AAChC;AACA,iBAAK,GAAL,CAAS,IAAT,EAAe,IAAf;;AAEA;AACA,iBAAK,QAAL,CAAc,KAAd,CAAoB,SAApB,GAAgC,EAAhC;AACA,iBAAK,QAAL,CAAc,OAAd,CAAsB,SAAtB,GAAkC,EAAlC;;AAEA;AACA,gBAAI,cAAc,SAAS,aAAT,CAAuB,QAAvB,CAAlB;AACA,wBAAY,KAAZ,GAAoB,EAApB;AACA,wBAAY,SAAZ,GAAwB,KAAK,OAAL,CAAa,WAArC;AACA,iBAAK,QAAL,CAAc,KAAd,CAAoB,WAApB,CAAgC,WAAhC;;AAEA;AACA,gBAAI,SAAJ;;AAEA,oBAAQ,OAAR,CAAgB,UAAC,UAAD,EAAgB;AAC5B,oBAAK,OAAO,WAAW,KAAlB,KAA4B,QAA7B,IAA2C,WAAW,KAAX,CAAiB,MAAjB,KAA4B,CAA3E,EAA+E;AAC3E;AACH;;AAED,oBAAI,CAAC,WAAW,KAAhB,EAAuB;AACnB,+BAAW,KAAX,GAAmB,WAAW,KAA9B;AACH;;AAED;AACA,oBAAI,cAAc,SAAS,aAAT,CAAuB,QAAvB,CAAlB;AACA,4BAAY,KAAZ,GAAoB,WAAW,KAA/B;AACA,4BAAY,SAAZ,GAAwB,WAAW,KAAnC;AACA,uBAAK,QAAL,CAAc,KAAd,CAAoB,WAApB,CAAgC,WAAhC;;AAEA;AACA,oBAAI,SAAS,SAAS,aAAT,CAAuB,KAAvB,CAAb;AACA,uBAAO,SAAP,GAAmB,cAAnB;AACA,uBAAO,SAAP,GAAmB,OAAK,OAAL,CAAa,SAAb,CAAuB,UAAvB,CAAnB;;AAEA,uBAAO,IAAP,CAAY,UAAZ,EAAwB,OAAxB,CAAgC,UAAC,GAAD,EAAS;AACrC,2BAAO,OAAP,CAAe,GAAf,IAAsB,WAAW,GAAX,CAAtB;AACH,iBAFD;;AAIA,uBAAK,QAAL,CAAc,OAAd,CAAsB,WAAtB,CAAkC,MAAlC;;AAEA;AACA,oBAAI,WAAW,QAAf,EAAyB;AACrB,gCAAY,WAAW,KAAvB;AACH;AACJ,aA9BD;;AAgCA;AACA,iBAAK,GAAL,CAAS,SAAT,EAAoB,MAApB;AACH;;AAED;;;;;;;aAMC,QAAQ,Q;8BAAU,M,EAAO;AACtB,gBAAI,KAAK,GAAL,OAAe,MAAnB,EAA0B;AACtB,uBAAO,KAAP;AACH;;AAED;AACA,gBAAI,MAAJ;;AAEA,gBAAK,UAAS,IAAV,IAAoB,OAAM,MAAN,GAAe,CAAvC,EAA2C;AACvC,yBAAS,KAAK,QAAL,CAAc,OAAd,CAAsB,aAAtB,gCAAiE,MAAjE,QAAT;;AAEA,oBAAI,CAAC,MAAL,EAAa;AACT,2BAAO,KAAP;AACH;AACJ;;AAED;AACA,gBAAI,UAAU,KAAK,QAAL,CAAc,OAAd,CAAsB,aAAtB,CAAoC,8BAApC,CAAd;;AAEA,gBAAI,OAAJ,EAAa;AACT,oBAAI,iBAAiB,QAAQ,SAAR,CAAkB,KAAlB,CAAwB,GAAxB,CAArB;AAAA,oBACI,gBAAgB,eAAe,OAAf,CAAuB,gBAAvB,CADpB;;AAGA,+BAAe,MAAf,CAAsB,aAAtB,EAAqC,CAArC;AACA,wBAAQ,SAAR,GAAoB,eAAe,IAAf,CAAoB,GAApB,CAApB;AACA,wBAAQ,OAAR,CAAgB,QAAhB,GAA2B,KAA3B;AACH;;AAED;AACA,iBAAK,QAAL,CAAc,KAAd,CAAoB,KAApB,GAA4B,EAA5B;;AAEA;AACA,gBAAI,MAAJ,EAAY;AACR,uBAAO,SAAP,IAAoB,iBAApB;AACA,uBAAO,OAAP,CAAe,QAAf,GAA0B,IAA1B;AACA,qBAAK,QAAL,CAAc,KAAd,CAAoB,KAApB,GAA4B,MAA5B;AACH;;AAED,mBAAO,IAAP;AACH;;;;;;kBAjPgB,W;;;;;;ACRrB;;;;AACA;;;;AACA;;AACA;;;;;;AAZA;;;;;;;;;AAcA,CAAC,UAAU,IAAV,EAAgB,OAAhB,EAAyB;AACtB,QAAI,QAAQ,SAAZ;;AAEA;AACA,WAAO,OAAP,GAAiB,KAAjB;;AAEA;AACA,QAAI,OAAO,MAAP,KAAkB,UAAlB,IAAgC,OAAO,GAA3C,EAAgD;AAC5C,eAAO,YAAM;AACT,mBAAO,KAAP;AACH,SAFD;AAGH;;AAED;AANA,SAOK;AACD,iBAAK,KAAL,GAAa,KAAb;AACH;AAEJ,CAlBD,EAkBG,UAAU,MAlBb,EAkBqB,YAAY;;AAE7B;AACA,2BAAS,QAAT;;AAEA;AACA,WAAO;AACH,8BADG;AAEH,gCAFG;AAGH,+BAHG;AAIH,mCAJG;AAKH,mCALG;AAMH;AANG,KAAP;AAQH,CAhCD;;;;;;;;;;QCQgB,Q,GAAA,Q;QAQA,M,GAAA,M;QAuBA,Q,GAAA,Q;;AA5ChB;;;;;;AAEA;AACA;AACA;;AAEA,IAAI,YAAY,0BAAhB;AAAA,IACI,QAAQ,EADZ;;AAGA;AACA;AACA;;AApBA;;;;;;;;;AAsBO,SAAS,QAAT,CAAkB,QAAlB,EAA4B,SAA5B,EAAuC;AAC1C,UAAM,QAAN,IAAkB,SAAlB;AACH;;AAED;AACA;AACA;;AAEO,SAAS,MAAT,CAAgB,IAAhB,EAAsB,OAAtB,EAA6C;AAAA,QAAd,OAAc,uEAAJ,EAAI;;AAChD;AACA,QAAI,UAAU,GAAV,CAAc,OAAd,CAAJ,EAA4B;AACxB,cAAM,IAAI,KAAJ,CAAU,iDAAV,CAAN;AACA;AACH;;AAED;AACA,QAAI,CAAC,MAAM,IAAN,CAAL,EAAkB;AACd,cAAM,IAAI,KAAJ,CAAU,8BAAV,CAAN;AACA;AACH;;AAED,QAAI,WAAW,IAAI,MAAM,IAAN,CAAJ,CAAgB,OAAhB,EAAyB,OAAzB,CAAf;AACA,cAAU,GAAV,CAAc,OAAd,EAAuB,QAAvB;;AAEA,WAAO,QAAP;AACH;;AAED;AACA;AACA;;AAEO,SAAS,QAAT,CAAkB,OAAlB,EAA2B;AAC9B,WAAO,UAAU,GAAV,CAAc,OAAd,CAAP;AACH;;;;;;;;;;AC9CD;;;;;;AAEO,IAAM,gDAAoB,yBAAO,mBAAP,CAA1B,C,CAXP;;;;;;;;;AAYO,IAAM,0CAAiB,yBAAO,gBAAP,CAAvB;AACA,IAAM,8CAAmB,yBAAO,kBAAP,CAAzB;AACA,IAAM,4CAAkB,yBAAO,iBAAP,CAAxB;AACA,IAAM,sCAAe,yBAAO,cAAP,CAArB;AACA,IAAM,0CAAiB,yBAAO,gBAAP,CAAvB;AACA,IAAM,8BAAW,yBAAO,UAAP,CAAjB;AACA,IAAM,8BAAW,yBAAO,UAAP,CAAjB;;;;;;;;QCVS,Q,GAAA,Q;QA2BA,U,GAAA,U;AAnChB;;;;;;;;AAQO,SAAS,QAAT,CAAkB,OAAlB,EAA2B,QAA3B,EAAqC;AACxC,QAAI,KAAJ;;AAEA,WAAO,YAAY;AAAA;;AACf,YAAI,OAAO,SAAX;;AAEA,YAAI,KAAJ,EAAW;AACP,yBAAa,KAAb;AACA,oBAAQ,IAAR;AACH;;AAED,gBAAQ,WAAW,YAAM;AACrB,oBAAQ,IAAR;AACA,qBAAS,KAAT,QAAqB,IAArB;AAEH,SAJO,EAIL,OAJK,CAAR;AAKH,KAbD;AAcH;;AAED;;;;;;;;AAQO,SAAS,UAAT,CAAoB,OAApB,EAA6B,SAA7B,EAAwC,QAAxC,EAAkD;AACrD,aAAS,eAAT,GAA2B;AACvB,gBAAQ,mBAAR,CAA4B,SAA5B,EAAuC,eAAvC;AACA,iBAAS,KAAT,CAAe,IAAf,EAAqB,SAArB;AACH;;AAED,YAAQ,gBAAR,CAAyB,SAAzB,EAAoC,eAApC;AACH","file":"drops.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nvar copy             = require('es5-ext/object/copy')\n  , normalizeOptions = require('es5-ext/object/normalize-options')\n  , ensureCallable   = require('es5-ext/object/valid-callable')\n  , map              = require('es5-ext/object/map')\n  , callable         = require('es5-ext/object/valid-callable')\n  , validValue       = require('es5-ext/object/valid-value')\n\n  , bind = Function.prototype.bind, defineProperty = Object.defineProperty\n  , hasOwnProperty = Object.prototype.hasOwnProperty\n  , define;\n\ndefine = function (name, desc, options) {\n\tvar value = validValue(desc) && callable(desc.value), dgs;\n\tdgs = copy(desc);\n\tdelete dgs.writable;\n\tdelete dgs.value;\n\tdgs.get = function () {\n\t\tif (!options.overwriteDefinition && hasOwnProperty.call(this, name)) return value;\n\t\tdesc.value = bind.call(value, options.resolveContext ? options.resolveContext(this) : this);\n\t\tdefineProperty(this, name, desc);\n\t\treturn this[name];\n\t};\n\treturn dgs;\n};\n\nmodule.exports = function (props/*, options*/) {\n\tvar options = normalizeOptions(arguments[1]);\n\tif (options.resolveContext != null) ensureCallable(options.resolveContext);\n\treturn map(props, function (desc, name) { return define(name, desc, options); });\n};\n","'use strict';\n\nvar assign        = require('es5-ext/object/assign')\n  , normalizeOpts = require('es5-ext/object/normalize-options')\n  , isCallable    = require('es5-ext/object/is-callable')\n  , contains      = require('es5-ext/string/#/contains')\n\n  , d;\n\nd = module.exports = function (dscr, value/*, options*/) {\n\tvar c, e, w, options, desc;\n\tif ((arguments.length < 2) || (typeof dscr !== 'string')) {\n\t\toptions = value;\n\t\tvalue = dscr;\n\t\tdscr = null;\n\t} else {\n\t\toptions = arguments[2];\n\t}\n\tif (dscr == null) {\n\t\tc = w = true;\n\t\te = false;\n\t} else {\n\t\tc = contains.call(dscr, 'c');\n\t\te = contains.call(dscr, 'e');\n\t\tw = contains.call(dscr, 'w');\n\t}\n\n\tdesc = { value: value, configurable: c, enumerable: e, writable: w };\n\treturn !options ? desc : assign(normalizeOpts(options), desc);\n};\n\nd.gs = function (dscr, get, set/*, options*/) {\n\tvar c, e, options, desc;\n\tif (typeof dscr !== 'string') {\n\t\toptions = set;\n\t\tset = get;\n\t\tget = dscr;\n\t\tdscr = null;\n\t} else {\n\t\toptions = arguments[3];\n\t}\n\tif (get == null) {\n\t\tget = undefined;\n\t} else if (!isCallable(get)) {\n\t\toptions = get;\n\t\tget = set = undefined;\n\t} else if (set == null) {\n\t\tset = undefined;\n\t} else if (!isCallable(set)) {\n\t\toptions = set;\n\t\tset = undefined;\n\t}\n\tif (dscr == null) {\n\t\tc = true;\n\t\te = false;\n\t} else {\n\t\tc = contains.call(dscr, 'c');\n\t\te = contains.call(dscr, 'e');\n\t}\n\n\tdesc = { get: get, set: set, configurable: c, enumerable: e };\n\treturn !options ? desc : assign(normalizeOpts(options), desc);\n};\n","// Inspired by Google Closure:\n// http://closure-library.googlecode.com/svn/docs/\n// closure_goog_array_array.js.html#goog.array.clear\n\n'use strict';\n\nvar value = require('../../object/valid-value');\n\nmodule.exports = function () {\n\tvalue(this).length = 0;\n\treturn this;\n};\n","'use strict';\n\nvar toString = Object.prototype.toString\n\n  , id = toString.call((function () { return arguments; }()));\n\nmodule.exports = function (x) { return (toString.call(x) === id); };\n","// Internal method, used by iteration functions.\n// Calls a function for each key-value pair found in object\n// Optionally takes compareFn to iterate object in specific order\n\n'use strict';\n\nvar callable = require('./valid-callable')\n  , value    = require('./valid-value')\n\n  , bind = Function.prototype.bind, call = Function.prototype.call, keys = Object.keys\n  , propertyIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nmodule.exports = function (method, defVal) {\n\treturn function (obj, cb/*, thisArg, compareFn*/) {\n\t\tvar list, thisArg = arguments[2], compareFn = arguments[3];\n\t\tobj = Object(value(obj));\n\t\tcallable(cb);\n\n\t\tlist = keys(obj);\n\t\tif (compareFn) {\n\t\t\tlist.sort((typeof compareFn === 'function') ? bind.call(compareFn, obj) : undefined);\n\t\t}\n\t\tif (typeof method !== 'function') method = list[method];\n\t\treturn call.call(method, list, function (key, index) {\n\t\t\tif (!propertyIsEnumerable.call(obj, key)) return defVal;\n\t\t\treturn call.call(cb, thisArg, obj[key], key, obj, index);\n\t\t});\n\t};\n};\n","'use strict';\n\nmodule.exports = require('./is-implemented')()\n\t? Object.assign\n\t: require('./shim');\n","'use strict';\n\nmodule.exports = function () {\n\tvar assign = Object.assign, obj;\n\tif (typeof assign !== 'function') return false;\n\tobj = { foo: 'raz' };\n\tassign(obj, { bar: 'dwa' }, { trzy: 'trzy' });\n\treturn (obj.foo + obj.bar + obj.trzy) === 'razdwatrzy';\n};\n","'use strict';\n\nvar keys  = require('../keys')\n  , value = require('../valid-value')\n\n  , max = Math.max;\n\nmodule.exports = function (dest, src/*, …srcn*/) {\n\tvar error, i, l = max(arguments.length, 2), assign;\n\tdest = Object(value(dest));\n\tassign = function (key) {\n\t\ttry { dest[key] = src[key]; } catch (e) {\n\t\t\tif (!error) error = e;\n\t\t}\n\t};\n\tfor (i = 1; i < l; ++i) {\n\t\tsrc = arguments[i];\n\t\tkeys(src).forEach(assign);\n\t}\n\tif (error !== undefined) throw error;\n\treturn dest;\n};\n","'use strict';\n\nvar assign = require('./assign')\n  , value  = require('./valid-value');\n\nmodule.exports = function (obj) {\n\tvar copy = Object(value(obj));\n\tif (copy !== obj) return copy;\n\treturn assign({}, obj);\n};\n","// Workaround for http://code.google.com/p/v8/issues/detail?id=2804\n\n'use strict';\n\nvar create = Object.create, shim;\n\nif (!require('./set-prototype-of/is-implemented')()) {\n\tshim = require('./set-prototype-of/shim');\n}\n\nmodule.exports = (function () {\n\tvar nullObject, props, desc;\n\tif (!shim) return create;\n\tif (shim.level !== 1) return create;\n\n\tnullObject = {};\n\tprops = {};\n\tdesc = { configurable: false, enumerable: false, writable: true,\n\t\tvalue: undefined };\n\tObject.getOwnPropertyNames(Object.prototype).forEach(function (name) {\n\t\tif (name === '__proto__') {\n\t\t\tprops[name] = { configurable: true, enumerable: false, writable: true,\n\t\t\t\tvalue: undefined };\n\t\t\treturn;\n\t\t}\n\t\tprops[name] = desc;\n\t});\n\tObject.defineProperties(nullObject, props);\n\n\tObject.defineProperty(shim, 'nullPolyfill', { configurable: false,\n\t\tenumerable: false, writable: false, value: nullObject });\n\n\treturn function (prototype, props) {\n\t\treturn create((prototype === null) ? nullObject : prototype, props);\n\t};\n}());\n","'use strict';\n\nmodule.exports = require('./_iterate')('forEach');\n","// Deprecated\n\n'use strict';\n\nmodule.exports = function (obj) { return typeof obj === 'function'; };\n","'use strict';\n\nvar map = { 'function': true, object: true };\n\nmodule.exports = function (x) {\n\treturn ((x != null) && map[typeof x]) || false;\n};\n","'use strict';\n\nmodule.exports = require('./is-implemented')()\n\t? Object.keys\n\t: require('./shim');\n","'use strict';\n\nmodule.exports = function () {\n\ttry {\n\t\tObject.keys('primitive');\n\t\treturn true;\n\t} catch (e) { return false; }\n};\n","'use strict';\n\nvar keys = Object.keys;\n\nmodule.exports = function (object) {\n\treturn keys(object == null ? object : Object(object));\n};\n","'use strict';\n\nvar callable = require('./valid-callable')\n  , forEach  = require('./for-each')\n\n  , call = Function.prototype.call;\n\nmodule.exports = function (obj, cb/*, thisArg*/) {\n\tvar o = {}, thisArg = arguments[2];\n\tcallable(cb);\n\tforEach(obj, function (value, key, obj, index) {\n\t\to[key] = call.call(cb, thisArg, value, key, obj, index);\n\t});\n\treturn o;\n};\n","'use strict';\n\nvar forEach = Array.prototype.forEach, create = Object.create;\n\nvar process = function (src, obj) {\n\tvar key;\n\tfor (key in src) obj[key] = src[key];\n};\n\nmodule.exports = function (options/*, …options*/) {\n\tvar result = create(null);\n\tforEach.call(arguments, function (options) {\n\t\tif (options == null) return;\n\t\tprocess(Object(options), result);\n\t});\n\treturn result;\n};\n","'use strict';\n\nmodule.exports = require('./is-implemented')()\n\t? Object.setPrototypeOf\n\t: require('./shim');\n","'use strict';\n\nvar create = Object.create, getPrototypeOf = Object.getPrototypeOf\n  , x = {};\n\nmodule.exports = function (/*customCreate*/) {\n\tvar setPrototypeOf = Object.setPrototypeOf\n\t  , customCreate = arguments[0] || create;\n\tif (typeof setPrototypeOf !== 'function') return false;\n\treturn getPrototypeOf(setPrototypeOf(customCreate(null), x)) === x;\n};\n","// Big thanks to @WebReflection for sorting this out\n// https://gist.github.com/WebReflection/5593554\n\n'use strict';\n\nvar isObject      = require('../is-object')\n  , value         = require('../valid-value')\n\n  , isPrototypeOf = Object.prototype.isPrototypeOf\n  , defineProperty = Object.defineProperty\n  , nullDesc = { configurable: true, enumerable: false, writable: true,\n\t\tvalue: undefined }\n  , validate;\n\nvalidate = function (obj, prototype) {\n\tvalue(obj);\n\tif ((prototype === null) || isObject(prototype)) return obj;\n\tthrow new TypeError('Prototype must be null or an object');\n};\n\nmodule.exports = (function (status) {\n\tvar fn, set;\n\tif (!status) return null;\n\tif (status.level === 2) {\n\t\tif (status.set) {\n\t\t\tset = status.set;\n\t\t\tfn = function (obj, prototype) {\n\t\t\t\tset.call(validate(obj, prototype), prototype);\n\t\t\t\treturn obj;\n\t\t\t};\n\t\t} else {\n\t\t\tfn = function (obj, prototype) {\n\t\t\t\tvalidate(obj, prototype).__proto__ = prototype;\n\t\t\t\treturn obj;\n\t\t\t};\n\t\t}\n\t} else {\n\t\tfn = function self(obj, prototype) {\n\t\t\tvar isNullBase;\n\t\t\tvalidate(obj, prototype);\n\t\t\tisNullBase = isPrototypeOf.call(self.nullPolyfill, obj);\n\t\t\tif (isNullBase) delete self.nullPolyfill.__proto__;\n\t\t\tif (prototype === null) prototype = self.nullPolyfill;\n\t\t\tobj.__proto__ = prototype;\n\t\t\tif (isNullBase) defineProperty(self.nullPolyfill, '__proto__', nullDesc);\n\t\t\treturn obj;\n\t\t};\n\t}\n\treturn Object.defineProperty(fn, 'level', { configurable: false,\n\t\tenumerable: false, writable: false, value: status.level });\n}((function () {\n\tvar x = Object.create(null), y = {}, set\n\t  , desc = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__');\n\n\tif (desc) {\n\t\ttry {\n\t\t\tset = desc.set; // Opera crashes at this point\n\t\t\tset.call(x, y);\n\t\t} catch (ignore) { }\n\t\tif (Object.getPrototypeOf(x) === y) return { set: set, level: 2 };\n\t}\n\n\tx.__proto__ = y;\n\tif (Object.getPrototypeOf(x) === y) return { level: 2 };\n\n\tx = {};\n\tx.__proto__ = y;\n\tif (Object.getPrototypeOf(x) === y) return { level: 1 };\n\n\treturn false;\n}())));\n\nrequire('../create');\n","'use strict';\n\nmodule.exports = function (fn) {\n\tif (typeof fn !== 'function') throw new TypeError(fn + \" is not a function\");\n\treturn fn;\n};\n","'use strict';\n\nvar isObject = require('./is-object');\n\nmodule.exports = function (value) {\n\tif (!isObject(value)) throw new TypeError(value + \" is not an Object\");\n\treturn value;\n};\n","'use strict';\n\nmodule.exports = function (value) {\n\tif (value == null) throw new TypeError(\"Cannot use null or undefined\");\n\treturn value;\n};\n","'use strict';\n\nmodule.exports = require('./is-implemented')()\n\t? String.prototype.contains\n\t: require('./shim');\n","'use strict';\n\nvar str = 'razdwatrzy';\n\nmodule.exports = function () {\n\tif (typeof str.contains !== 'function') return false;\n\treturn ((str.contains('dwa') === true) && (str.contains('foo') === false));\n};\n","'use strict';\n\nvar indexOf = String.prototype.indexOf;\n\nmodule.exports = function (searchString/*, position*/) {\n\treturn indexOf.call(this, searchString, arguments[1]) > -1;\n};\n","'use strict';\n\nvar toString = Object.prototype.toString\n\n  , id = toString.call('');\n\nmodule.exports = function (x) {\n\treturn (typeof x === 'string') || (x && (typeof x === 'object') &&\n\t\t((x instanceof String) || (toString.call(x) === id))) || false;\n};\n","'use strict';\n\nvar generated = Object.create(null)\n\n  , random = Math.random;\n\nmodule.exports = function () {\n\tvar str;\n\tdo { str = random().toString(36).slice(2); } while (generated[str]);\n\treturn str;\n};\n","'use strict';\n\nvar setPrototypeOf = require('es5-ext/object/set-prototype-of')\n  , contains       = require('es5-ext/string/#/contains')\n  , d              = require('d')\n  , Iterator       = require('./')\n\n  , defineProperty = Object.defineProperty\n  , ArrayIterator;\n\nArrayIterator = module.exports = function (arr, kind) {\n\tif (!(this instanceof ArrayIterator)) return new ArrayIterator(arr, kind);\n\tIterator.call(this, arr);\n\tif (!kind) kind = 'value';\n\telse if (contains.call(kind, 'key+value')) kind = 'key+value';\n\telse if (contains.call(kind, 'key')) kind = 'key';\n\telse kind = 'value';\n\tdefineProperty(this, '__kind__', d('', kind));\n};\nif (setPrototypeOf) setPrototypeOf(ArrayIterator, Iterator);\n\nArrayIterator.prototype = Object.create(Iterator.prototype, {\n\tconstructor: d(ArrayIterator),\n\t_resolve: d(function (i) {\n\t\tif (this.__kind__ === 'value') return this.__list__[i];\n\t\tif (this.__kind__ === 'key+value') return [i, this.__list__[i]];\n\t\treturn i;\n\t}),\n\ttoString: d(function () { return '[object Array Iterator]'; })\n});\n","'use strict';\n\nvar isArguments = require('es5-ext/function/is-arguments')\n  , callable    = require('es5-ext/object/valid-callable')\n  , isString    = require('es5-ext/string/is-string')\n  , get         = require('./get')\n\n  , isArray = Array.isArray, call = Function.prototype.call\n  , some = Array.prototype.some;\n\nmodule.exports = function (iterable, cb/*, thisArg*/) {\n\tvar mode, thisArg = arguments[2], result, doBreak, broken, i, l, char, code;\n\tif (isArray(iterable) || isArguments(iterable)) mode = 'array';\n\telse if (isString(iterable)) mode = 'string';\n\telse iterable = get(iterable);\n\n\tcallable(cb);\n\tdoBreak = function () { broken = true; };\n\tif (mode === 'array') {\n\t\tsome.call(iterable, function (value) {\n\t\t\tcall.call(cb, thisArg, value, doBreak);\n\t\t\tif (broken) return true;\n\t\t});\n\t\treturn;\n\t}\n\tif (mode === 'string') {\n\t\tl = iterable.length;\n\t\tfor (i = 0; i < l; ++i) {\n\t\t\tchar = iterable[i];\n\t\t\tif ((i + 1) < l) {\n\t\t\t\tcode = char.charCodeAt(0);\n\t\t\t\tif ((code >= 0xD800) && (code <= 0xDBFF)) char += iterable[++i];\n\t\t\t}\n\t\t\tcall.call(cb, thisArg, char, doBreak);\n\t\t\tif (broken) break;\n\t\t}\n\t\treturn;\n\t}\n\tresult = iterable.next();\n\n\twhile (!result.done) {\n\t\tcall.call(cb, thisArg, result.value, doBreak);\n\t\tif (broken) return;\n\t\tresult = iterable.next();\n\t}\n};\n","'use strict';\n\nvar isArguments    = require('es5-ext/function/is-arguments')\n  , isString       = require('es5-ext/string/is-string')\n  , ArrayIterator  = require('./array')\n  , StringIterator = require('./string')\n  , iterable       = require('./valid-iterable')\n  , iteratorSymbol = require('es6-symbol').iterator;\n\nmodule.exports = function (obj) {\n\tif (typeof iterable(obj)[iteratorSymbol] === 'function') return obj[iteratorSymbol]();\n\tif (isArguments(obj)) return new ArrayIterator(obj);\n\tif (isString(obj)) return new StringIterator(obj);\n\treturn new ArrayIterator(obj);\n};\n","'use strict';\n\nvar clear    = require('es5-ext/array/#/clear')\n  , assign   = require('es5-ext/object/assign')\n  , callable = require('es5-ext/object/valid-callable')\n  , value    = require('es5-ext/object/valid-value')\n  , d        = require('d')\n  , autoBind = require('d/auto-bind')\n  , Symbol   = require('es6-symbol')\n\n  , defineProperty = Object.defineProperty\n  , defineProperties = Object.defineProperties\n  , Iterator;\n\nmodule.exports = Iterator = function (list, context) {\n\tif (!(this instanceof Iterator)) return new Iterator(list, context);\n\tdefineProperties(this, {\n\t\t__list__: d('w', value(list)),\n\t\t__context__: d('w', context),\n\t\t__nextIndex__: d('w', 0)\n\t});\n\tif (!context) return;\n\tcallable(context.on);\n\tcontext.on('_add', this._onAdd);\n\tcontext.on('_delete', this._onDelete);\n\tcontext.on('_clear', this._onClear);\n};\n\ndefineProperties(Iterator.prototype, assign({\n\tconstructor: d(Iterator),\n\t_next: d(function () {\n\t\tvar i;\n\t\tif (!this.__list__) return;\n\t\tif (this.__redo__) {\n\t\t\ti = this.__redo__.shift();\n\t\t\tif (i !== undefined) return i;\n\t\t}\n\t\tif (this.__nextIndex__ < this.__list__.length) return this.__nextIndex__++;\n\t\tthis._unBind();\n\t}),\n\tnext: d(function () { return this._createResult(this._next()); }),\n\t_createResult: d(function (i) {\n\t\tif (i === undefined) return { done: true, value: undefined };\n\t\treturn { done: false, value: this._resolve(i) };\n\t}),\n\t_resolve: d(function (i) { return this.__list__[i]; }),\n\t_unBind: d(function () {\n\t\tthis.__list__ = null;\n\t\tdelete this.__redo__;\n\t\tif (!this.__context__) return;\n\t\tthis.__context__.off('_add', this._onAdd);\n\t\tthis.__context__.off('_delete', this._onDelete);\n\t\tthis.__context__.off('_clear', this._onClear);\n\t\tthis.__context__ = null;\n\t}),\n\ttoString: d(function () { return '[object Iterator]'; })\n}, autoBind({\n\t_onAdd: d(function (index) {\n\t\tif (index >= this.__nextIndex__) return;\n\t\t++this.__nextIndex__;\n\t\tif (!this.__redo__) {\n\t\t\tdefineProperty(this, '__redo__', d('c', [index]));\n\t\t\treturn;\n\t\t}\n\t\tthis.__redo__.forEach(function (redo, i) {\n\t\t\tif (redo >= index) this.__redo__[i] = ++redo;\n\t\t}, this);\n\t\tthis.__redo__.push(index);\n\t}),\n\t_onDelete: d(function (index) {\n\t\tvar i;\n\t\tif (index >= this.__nextIndex__) return;\n\t\t--this.__nextIndex__;\n\t\tif (!this.__redo__) return;\n\t\ti = this.__redo__.indexOf(index);\n\t\tif (i !== -1) this.__redo__.splice(i, 1);\n\t\tthis.__redo__.forEach(function (redo, i) {\n\t\t\tif (redo > index) this.__redo__[i] = --redo;\n\t\t}, this);\n\t}),\n\t_onClear: d(function () {\n\t\tif (this.__redo__) clear.call(this.__redo__);\n\t\tthis.__nextIndex__ = 0;\n\t})\n})));\n\ndefineProperty(Iterator.prototype, Symbol.iterator, d(function () {\n\treturn this;\n}));\ndefineProperty(Iterator.prototype, Symbol.toStringTag, d('', 'Iterator'));\n","'use strict';\n\nvar isArguments    = require('es5-ext/function/is-arguments')\n  , isString       = require('es5-ext/string/is-string')\n  , iteratorSymbol = require('es6-symbol').iterator\n\n  , isArray = Array.isArray;\n\nmodule.exports = function (value) {\n\tif (value == null) return false;\n\tif (isArray(value)) return true;\n\tif (isString(value)) return true;\n\tif (isArguments(value)) return true;\n\treturn (typeof value[iteratorSymbol] === 'function');\n};\n","// Thanks @mathiasbynens\n// http://mathiasbynens.be/notes/javascript-unicode#iterating-over-symbols\n\n'use strict';\n\nvar setPrototypeOf = require('es5-ext/object/set-prototype-of')\n  , d              = require('d')\n  , Iterator       = require('./')\n\n  , defineProperty = Object.defineProperty\n  , StringIterator;\n\nStringIterator = module.exports = function (str) {\n\tif (!(this instanceof StringIterator)) return new StringIterator(str);\n\tstr = String(str);\n\tIterator.call(this, str);\n\tdefineProperty(this, '__length__', d('', str.length));\n\n};\nif (setPrototypeOf) setPrototypeOf(StringIterator, Iterator);\n\nStringIterator.prototype = Object.create(Iterator.prototype, {\n\tconstructor: d(StringIterator),\n\t_next: d(function () {\n\t\tif (!this.__list__) return;\n\t\tif (this.__nextIndex__ < this.__length__) return this.__nextIndex__++;\n\t\tthis._unBind();\n\t}),\n\t_resolve: d(function (i) {\n\t\tvar char = this.__list__[i], code;\n\t\tif (this.__nextIndex__ === this.__length__) return char;\n\t\tcode = char.charCodeAt(0);\n\t\tif ((code >= 0xD800) && (code <= 0xDBFF)) return char + this.__list__[this.__nextIndex__++];\n\t\treturn char;\n\t}),\n\ttoString: d(function () { return '[object String Iterator]'; })\n});\n","'use strict';\n\nvar isIterable = require('./is-iterable');\n\nmodule.exports = function (value) {\n\tif (!isIterable(value)) throw new TypeError(value + \" is not iterable\");\n\treturn value;\n};\n","'use strict';\n\nmodule.exports = require('./is-implemented')() ? Symbol : require('./polyfill');\n","'use strict';\n\nvar validTypes = { object: true, symbol: true };\n\nmodule.exports = function () {\n\tvar symbol;\n\tif (typeof Symbol !== 'function') return false;\n\tsymbol = Symbol('test symbol');\n\ttry { String(symbol); } catch (e) { return false; }\n\n\t// Return 'true' also for polyfills\n\tif (!validTypes[typeof Symbol.iterator]) return false;\n\tif (!validTypes[typeof Symbol.toPrimitive]) return false;\n\tif (!validTypes[typeof Symbol.toStringTag]) return false;\n\n\treturn true;\n};\n","'use strict';\n\nmodule.exports = function (x) {\n\tif (!x) return false;\n\tif (typeof x === 'symbol') return true;\n\tif (!x.constructor) return false;\n\tif (x.constructor.name !== 'Symbol') return false;\n\treturn (x[x.constructor.toStringTag] === 'Symbol');\n};\n","// ES2015 Symbol polyfill for environments that do not (or partially) support it\n\n'use strict';\n\nvar d              = require('d')\n  , validateSymbol = require('./validate-symbol')\n\n  , create = Object.create, defineProperties = Object.defineProperties\n  , defineProperty = Object.defineProperty, objPrototype = Object.prototype\n  , NativeSymbol, SymbolPolyfill, HiddenSymbol, globalSymbols = create(null)\n  , isNativeSafe;\n\nif (typeof Symbol === 'function') {\n\tNativeSymbol = Symbol;\n\ttry {\n\t\tString(NativeSymbol());\n\t\tisNativeSafe = true;\n\t} catch (ignore) {}\n}\n\nvar generateName = (function () {\n\tvar created = create(null);\n\treturn function (desc) {\n\t\tvar postfix = 0, name, ie11BugWorkaround;\n\t\twhile (created[desc + (postfix || '')]) ++postfix;\n\t\tdesc += (postfix || '');\n\t\tcreated[desc] = true;\n\t\tname = '@@' + desc;\n\t\tdefineProperty(objPrototype, name, d.gs(null, function (value) {\n\t\t\t// For IE11 issue see:\n\t\t\t// https://connect.microsoft.com/IE/feedbackdetail/view/1928508/\n\t\t\t//    ie11-broken-getters-on-dom-objects\n\t\t\t// https://github.com/medikoo/es6-symbol/issues/12\n\t\t\tif (ie11BugWorkaround) return;\n\t\t\tie11BugWorkaround = true;\n\t\t\tdefineProperty(this, name, d(value));\n\t\t\tie11BugWorkaround = false;\n\t\t}));\n\t\treturn name;\n\t};\n}());\n\n// Internal constructor (not one exposed) for creating Symbol instances.\n// This one is used to ensure that `someSymbol instanceof Symbol` always return false\nHiddenSymbol = function Symbol(description) {\n\tif (this instanceof HiddenSymbol) throw new TypeError('Symbol is not a constructor');\n\treturn SymbolPolyfill(description);\n};\n\n// Exposed `Symbol` constructor\n// (returns instances of HiddenSymbol)\nmodule.exports = SymbolPolyfill = function Symbol(description) {\n\tvar symbol;\n\tif (this instanceof Symbol) throw new TypeError('Symbol is not a constructor');\n\tif (isNativeSafe) return NativeSymbol(description);\n\tsymbol = create(HiddenSymbol.prototype);\n\tdescription = (description === undefined ? '' : String(description));\n\treturn defineProperties(symbol, {\n\t\t__description__: d('', description),\n\t\t__name__: d('', generateName(description))\n\t});\n};\ndefineProperties(SymbolPolyfill, {\n\tfor: d(function (key) {\n\t\tif (globalSymbols[key]) return globalSymbols[key];\n\t\treturn (globalSymbols[key] = SymbolPolyfill(String(key)));\n\t}),\n\tkeyFor: d(function (s) {\n\t\tvar key;\n\t\tvalidateSymbol(s);\n\t\tfor (key in globalSymbols) if (globalSymbols[key] === s) return key;\n\t}),\n\n\t// To ensure proper interoperability with other native functions (e.g. Array.from)\n\t// fallback to eventual native implementation of given symbol\n\thasInstance: d('', (NativeSymbol && NativeSymbol.hasInstance) || SymbolPolyfill('hasInstance')),\n\tisConcatSpreadable: d('', (NativeSymbol && NativeSymbol.isConcatSpreadable) ||\n\t\tSymbolPolyfill('isConcatSpreadable')),\n\titerator: d('', (NativeSymbol && NativeSymbol.iterator) || SymbolPolyfill('iterator')),\n\tmatch: d('', (NativeSymbol && NativeSymbol.match) || SymbolPolyfill('match')),\n\treplace: d('', (NativeSymbol && NativeSymbol.replace) || SymbolPolyfill('replace')),\n\tsearch: d('', (NativeSymbol && NativeSymbol.search) || SymbolPolyfill('search')),\n\tspecies: d('', (NativeSymbol && NativeSymbol.species) || SymbolPolyfill('species')),\n\tsplit: d('', (NativeSymbol && NativeSymbol.split) || SymbolPolyfill('split')),\n\ttoPrimitive: d('', (NativeSymbol && NativeSymbol.toPrimitive) || SymbolPolyfill('toPrimitive')),\n\ttoStringTag: d('', (NativeSymbol && NativeSymbol.toStringTag) || SymbolPolyfill('toStringTag')),\n\tunscopables: d('', (NativeSymbol && NativeSymbol.unscopables) || SymbolPolyfill('unscopables'))\n});\n\n// Internal tweaks for real symbol producer\ndefineProperties(HiddenSymbol.prototype, {\n\tconstructor: d(SymbolPolyfill),\n\ttoString: d('', function () { return this.__name__; })\n});\n\n// Proper implementation of methods exposed on Symbol.prototype\n// They won't be accessible on produced symbol instances as they derive from HiddenSymbol.prototype\ndefineProperties(SymbolPolyfill.prototype, {\n\ttoString: d(function () { return 'Symbol (' + validateSymbol(this).__description__ + ')'; }),\n\tvalueOf: d(function () { return validateSymbol(this); })\n});\ndefineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toPrimitive, d('', function () {\n\tvar symbol = validateSymbol(this);\n\tif (typeof symbol === 'symbol') return symbol;\n\treturn symbol.toString();\n}));\ndefineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toStringTag, d('c', 'Symbol'));\n\n// Proper implementaton of toPrimitive and toStringTag for returned symbol instances\ndefineProperty(HiddenSymbol.prototype, SymbolPolyfill.toStringTag,\n\td('c', SymbolPolyfill.prototype[SymbolPolyfill.toStringTag]));\n\n// Note: It's important to define `toPrimitive` as last one, as some implementations\n// implement `toPrimitive` natively without implementing `toStringTag` (or other specified symbols)\n// And that may invoke error in definition flow:\n// See: https://github.com/medikoo/es6-symbol/issues/13#issuecomment-164146149\ndefineProperty(HiddenSymbol.prototype, SymbolPolyfill.toPrimitive,\n\td('c', SymbolPolyfill.prototype[SymbolPolyfill.toPrimitive]));\n","'use strict';\n\nvar isSymbol = require('./is-symbol');\n\nmodule.exports = function (value) {\n\tif (!isSymbol(value)) throw new TypeError(value + \" is not a symbol\");\n\treturn value;\n};\n","'use strict';\n\nmodule.exports = require('./is-implemented')() ? WeakMap : require('./polyfill');\n","'use strict';\n\nmodule.exports = function () {\n\tvar weakMap, x;\n\tif (typeof WeakMap !== 'function') return false;\n\ttry {\n\t\t// WebKit doesn't support arguments and crashes\n\t\tweakMap = new WeakMap([[x = {}, 'one'], [{}, 'two'], [{}, 'three']]);\n\t} catch (e) {\n\t\treturn false;\n\t}\n\tif (String(weakMap) !== '[object WeakMap]') return false;\n\tif (typeof weakMap.set !== 'function') return false;\n\tif (weakMap.set({}, 1) !== weakMap) return false;\n\tif (typeof weakMap.delete !== 'function') return false;\n\tif (typeof weakMap.has !== 'function') return false;\n\tif (weakMap.get(x) !== 'one') return false;\n\n\treturn true;\n};\n","// Exports true if environment provides native `WeakMap` implementation, whatever that is.\n\n'use strict';\n\nmodule.exports = (function () {\n\tif (typeof WeakMap !== 'function') return false;\n\treturn (Object.prototype.toString.call(new WeakMap()) === '[object WeakMap]');\n}());\n","'use strict';\n\nvar setPrototypeOf    = require('es5-ext/object/set-prototype-of')\n  , object            = require('es5-ext/object/valid-object')\n  , value             = require('es5-ext/object/valid-value')\n  , randomUniq        = require('es5-ext/string/random-uniq')\n  , d                 = require('d')\n  , getIterator       = require('es6-iterator/get')\n  , forOf             = require('es6-iterator/for-of')\n  , toStringTagSymbol = require('es6-symbol').toStringTag\n  , isNative          = require('./is-native-implemented')\n\n  , isArray = Array.isArray, defineProperty = Object.defineProperty\n  , hasOwnProperty = Object.prototype.hasOwnProperty, getPrototypeOf = Object.getPrototypeOf\n  , WeakMapPoly;\n\nmodule.exports = WeakMapPoly = function (/*iterable*/) {\n\tvar iterable = arguments[0], self;\n\tif (!(this instanceof WeakMapPoly)) throw new TypeError('Constructor requires \\'new\\'');\n\tif (isNative && setPrototypeOf && (WeakMap !== WeakMapPoly)) {\n\t\tself = setPrototypeOf(new WeakMap(), getPrototypeOf(this));\n\t} else {\n\t\tself = this;\n\t}\n\tif (iterable != null) {\n\t\tif (!isArray(iterable)) iterable = getIterator(iterable);\n\t}\n\tdefineProperty(self, '__weakMapData__', d('c', '$weakMap$' + randomUniq()));\n\tif (!iterable) return self;\n\tforOf(iterable, function (val) {\n\t\tvalue(val);\n\t\tself.set(val[0], val[1]);\n\t});\n\treturn self;\n};\n\nif (isNative) {\n\tif (setPrototypeOf) setPrototypeOf(WeakMapPoly, WeakMap);\n\tWeakMapPoly.prototype = Object.create(WeakMap.prototype, {\n\t\tconstructor: d(WeakMapPoly)\n\t});\n}\n\nObject.defineProperties(WeakMapPoly.prototype, {\n\tdelete: d(function (key) {\n\t\tif (hasOwnProperty.call(object(key), this.__weakMapData__)) {\n\t\t\tdelete key[this.__weakMapData__];\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}),\n\tget: d(function (key) {\n\t\tif (hasOwnProperty.call(object(key), this.__weakMapData__)) {\n\t\t\treturn key[this.__weakMapData__];\n\t\t}\n\t}),\n\thas: d(function (key) {\n\t\treturn hasOwnProperty.call(object(key), this.__weakMapData__);\n\t}),\n\tset: d(function (key, value) {\n\t\tdefineProperty(object(key), this.__weakMapData__, d('c', value));\n\t\treturn this;\n\t}),\n\ttoString: d(function () { return '[object WeakMap]'; })\n});\ndefineProperty(WeakMapPoly.prototype, toStringTagSymbol, d('c', 'WeakMap'));\n","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","/*\r\n |--------------------------------------------------------------------------\r\n | Drops base field\r\n |--------------------------------------------------------------------------\r\n |\r\n |\r\n |\r\n */\r\n\r\nimport assign from \"object-assign\";\r\nimport * as symbols from \"./symbols\";\r\nimport {listenOnce} from \"./utils\";\r\n\r\nexport default class Field {\r\n\r\n    /*\r\n     -------------------------------\r\n     Initializers\r\n     -------------------------------\r\n     */\r\n\r\n\r\n    constructor(input, options = {}) {\r\n        this.elements = {};\r\n        this.elements.input = input;\r\n\r\n        // Initialize\r\n        this[symbols.initializeOptions](options);\r\n        this[symbols.initializeView]();\r\n        this[symbols.initializeState]();\r\n        this[symbols.initializeEvents]();\r\n    }\r\n\r\n    [symbols.initializeOptions](options) {\r\n        this.options = assign({\r\n            placeholder: this.elements.input.placeholder || \"\",\r\n\r\n            getSelection(field, value) {\r\n                return value;\r\n            },\r\n\r\n            getPlaceholder(field, placeholder) {\r\n                return placeholder;\r\n            },\r\n\r\n            getArrow(field) {\r\n                return \"\";\r\n            }\r\n\r\n        }, options);\r\n    }\r\n\r\n    [symbols.initializeView]() {\r\n        // Hide input element\r\n        this.elements.input.style.display = \"none\";\r\n\r\n        //\r\n        // Wrapper\r\n        //\r\n\r\n        this.elements.wrapper = document.createElement(\"div\");\r\n        this.elements.wrapper.className = \"drops \" + this.elements.input.className;\r\n\r\n        //\r\n        // Head\r\n        //\r\n\r\n        this.elements.head = document.createElement(\"div\");\r\n        this.elements.head.className = \"drops-head\";\r\n        this.elements.wrapper.appendChild(this.elements.head);\r\n\r\n        this.elements.arrow = document.createElement(\"div\");\r\n        this.elements.arrow.className = \"drops-arrow\";\r\n        this.elements.arrow.innerHTML = this.options.getArrow(this);\r\n        this.elements.head.appendChild(this.elements.arrow);\r\n\r\n\r\n        this.elements.placeholder = document.createElement(\"div\");\r\n        this.elements.placeholder.className = \"drops-placeholder\";\r\n        this.elements.placeholder.innerHTML = this.options.getPlaceholder(this, this.options.placeholder);\r\n        this.elements.head.appendChild(this.elements.placeholder);\r\n\r\n        this.elements.selection = document.createElement(\"div\");\r\n        this.elements.selection.className = \"drops-selection\";\r\n        this.elements.head.appendChild(this.elements.selection);\r\n\r\n        //\r\n        // Body\r\n        //\r\n\r\n        this.elements.body = document.createElement(\"div\");\r\n        this.elements.body.className = \"drops-body\";\r\n        this.elements.wrapper.appendChild(this.elements.body);\r\n\r\n        //\r\n        // Push input values to the view \r\n        //\r\n\r\n        if (this.elements.input.disabled) {\r\n            this.disable();\r\n        }\r\n\r\n        // Append view\r\n        if (this.elements.input.nextSibling) {\r\n            this.elements.input.parentNode.insertBefore(this.elements.wrapper, this.elements.input.nextSibling);\r\n        }\r\n        else {\r\n            this.elements.input.parentNode.appendChild(this.elements.wrapper);\r\n        }\r\n    }\r\n\r\n    [symbols.initializeState]() {\r\n        this[symbols.setSelection](this.get());\r\n    }\r\n\r\n    [symbols.initializeEvents]() {\r\n\r\n        //\r\n        // Click on placeholder\r\n        //\r\n\r\n        this.elements.head.addEventListener(\"click\", () => {\r\n            this.toggle();\r\n        });\r\n\r\n        //\r\n        // Click outside (on window)\r\n        //\r\n\r\n        window.addEventListener(\"click\", (e) => {\r\n            if ((this.elements.wrapper != e.target) && !this.elements.wrapper.contains(e.target)) {\r\n                this.close();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    /*\r\n     -------------------------------\r\n     Open/Closed state\r\n     -------------------------------\r\n     */\r\n\r\n    get opened() {\r\n        return this.elements.wrapper.className.indexOf(\"drops-open\") > -1;\r\n    }\r\n\r\n    get closed() {\r\n        return !this.opened;\r\n    }\r\n\r\n    open(silent = false) {\r\n        if (this.opened || this.disabled) {\r\n            return this;\r\n        }\r\n\r\n        this.elements.wrapper.className += \" drops-open\";\r\n\r\n        // Trigger\r\n        if (silent == false) {\r\n            this.trigger(\"open\", this);\r\n\r\n            // Trigger opened on transition end\r\n            listenOnce(this.elements.body, \"transitionend\", () => {\r\n                this.trigger(\"opened\", this);\r\n            });\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    close(silent = false) {\r\n        if (this.closed || this.disabled) {\r\n            return this;\r\n        }\r\n\r\n        var classList = this.elements.wrapper.className.split(\" \"),\r\n            classIndex = classList.indexOf(\"drops-open\");\r\n\r\n        classList.splice(classIndex, 1);\r\n        this.elements.wrapper.className = classList.join(\" \");\r\n\r\n        // Trigger\r\n        if (silent == false) {\r\n            this.trigger(\"close\", this);\r\n\r\n            // Trigger closed on transition end\r\n            listenOnce(this.elements.body, \"transitionend\", () => {\r\n                this.trigger(\"closed\");\r\n            });\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    toggle() {\r\n        return this.opened ? this.close() : this.open();\r\n    }\r\n\r\n    /*\r\n     -------------------------------\r\n     Selection state\r\n     -------------------------------\r\n     */\r\n\r\n    [symbols.setSelection](value) {\r\n        // Clear\r\n        if ((value == null) || (value.length === 0)) {\r\n            return this[symbols.clearSelection]();\r\n        }\r\n\r\n        // Set\r\n        this.elements.selection.innerHTML = this.options.getSelection(this, value);\r\n        this.elements.wrapper.className += \" drops-has-selection\";\r\n\r\n        return this;\r\n    }\r\n\r\n    [symbols.clearSelection]() {\r\n        var classList = this.elements.wrapper.className.split(\" \"),\r\n            classIndex = classList.indexOf(\"drops-has-selection\");\r\n\r\n        if (classIndex > -1) {\r\n            classList.splice(classIndex, 1);\r\n            this.elements.wrapper.className = classList.join(\" \");\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     -------------------------------\r\n     Enable/Disabled state\r\n     -------------------------------\r\n     */\r\n\r\n    get disabled() {\r\n        return this.elements.wrapper.className.indexOf(\"drops-disabled\") > -1;\r\n    }\r\n\r\n    get enabled() {\r\n        return !this.disabled;\r\n    }\r\n\r\n    enable(silent = false) {\r\n        if (this.enabled) {\r\n            return this;\r\n        }\r\n\r\n        var classList = this.elements.wrapper.className.split(\" \"),\r\n            disabledIndex = classList.indexOf(\"drops-disabled\");\r\n\r\n        classList.splice(disabledIndex, 1);\r\n\r\n        this.elements.wrapper.className = classList.join(\" \");\r\n\r\n        // Trigger\r\n        if (silent == false) {\r\n            this.trigger(\"enable\", this);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    disable(silent = false) {\r\n        if (this.disabled) {\r\n            return this;\r\n        }\r\n\r\n        this.elements.wrapper.className += \" drops-disabled\";\r\n\r\n        if (silent == false) {\r\n            this.trigger(\"disable\", this);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     -------------------------------\r\n     Value mutators\r\n     -------------------------------\r\n     */\r\n\r\n    [symbols.getValue]() {\r\n        return this.elements.input.value;\r\n    }\r\n\r\n    [symbols.setValue](value) {\r\n        if (this.get() === value) {\r\n            return false;\r\n        }\r\n\r\n        this.elements.input.value = value || \"\";\r\n        return true;\r\n    }\r\n\r\n    get() {\r\n        return this[symbols.getValue]();\r\n    }\r\n\r\n    set(value, silent = false) {\r\n        if (this[symbols.setValue](value)) {\r\n            this[symbols.setSelection](this.get());\r\n\r\n            if (!silent) {\r\n                this.trigger(\"change\", this);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     -------------------------------\r\n     Events\r\n     -------------------------------\r\n     */\r\n\r\n    on(eventName, callback) {\r\n        this.elements.input.addEventListener(eventName, callback);\r\n        return this;\r\n    }\r\n\r\n    off(eventName, callback) {\r\n        this.elements.input.removeEventListener(eventName, callback);\r\n        return this;\r\n    }\r\n\r\n    trigger(eventName, data = {}) {\r\n        var event = new Event(eventName, data);\r\n        this.elements.input.dispatchEvent(event);\r\n        return this;\r\n    }\r\n\r\n}","/*\r\n |--------------------------------------------------------------------------\r\n | Select field\r\n |--------------------------------------------------------------------------\r\n |\r\n |\r\n |\r\n */\r\n\r\nimport assign from \"object-assign\";\r\nimport Field from \"./Field\";\r\nimport * as symbols from \"./symbols\";\r\nimport {debounce} from \"./utils\";\r\nimport Symbol from \"es6-symbol\";\r\n\r\n// Local symbols\r\n\r\nexport default class SelectField extends Field {\r\n\r\n    /*\r\n     -------------------------------\r\n     Initializers\r\n     -------------------------------\r\n     */\r\n\r\n    constructor(input, options = {}) {\r\n        if (input.nodeName.toLowerCase() !== \"select\") {\r\n            throw new Error(\"The select field can only instantiate select elements!\");\r\n            return;\r\n        }\r\n\r\n        super(input, options);\r\n    }\r\n\r\n    [symbols.initializeOptions](options) {\r\n        super[symbols.initializeOptions](options);\r\n\r\n        this.options = assign(this.options, {\r\n            placeholder: this.elements.input.dataset.placeholder || \"\",\r\n\r\n            // Query\r\n            queryOptions: true,\r\n            queryPlaceholder: \"Filter options...\",\r\n            queryDebounce: 250,\r\n            query(field, options, query) {\r\n                // Filter by label\r\n                options.forEach((option) => {\r\n                    option.style.display = option.dataset.label.indexOf(query) === 0 ?\r\n                        \"block\" : \"none\";\r\n                });\r\n            },\r\n\r\n            // Selection\r\n            getSelection(field, value) {\r\n                var data = field.getOptionData(value);\r\n                return data ? data.label : \"\";\r\n            },\r\n\r\n            // Option\r\n            getOption(data) {\r\n                return data.label;\r\n            }\r\n\r\n        }, options);\r\n    }\r\n\r\n    [symbols.initializeView]() {\r\n        super[symbols.initializeView]();\r\n\r\n        //\r\n        // Overrides\r\n        //\r\n\r\n        this.elements.wrapper.className += \" drops-select\";\r\n\r\n        //\r\n        // Options query\r\n        //\r\n\r\n        if (this.options.queryOptions) {\r\n            this.elements.query = document.createElement(\"div\");\r\n            this.elements.query.className = \"drops-query\";\r\n            this.elements.body.appendChild(this.elements.query);\r\n\r\n            this.elements.queryInput = document.createElement(\"input\");\r\n            this.elements.queryInput.type = \"text\";\r\n            this.elements.queryInput.placeholder = this.options.queryPlaceholder;\r\n            this.elements.query.appendChild(this.elements.queryInput);\r\n        }\r\n\r\n        //\r\n        // Options\r\n        //\r\n\r\n        this.elements.options = document.createElement(\"div\");\r\n        this.elements.options.className = \"drops-options\";\r\n        this.elements.body.appendChild(this.elements.options);\r\n    }\r\n\r\n    [symbols.initializeState]() {\r\n        var options = [];\r\n\r\n        Array.prototype.slice.call(this.elements.input.options).forEach((option) => {\r\n            options.push({\r\n                value: option.value,\r\n                label: option.innerText,\r\n                selected: option.selected\r\n            });\r\n        });\r\n\r\n        this.setOptions(options, true);\r\n    }\r\n\r\n    [symbols.initializeEvents]() {\r\n        super[symbols.initializeEvents]();\r\n\r\n        //\r\n        // Options click event\r\n        //\r\n\r\n        this.elements.options.addEventListener(\"click\", (e) => {\r\n            if (e.target.className.indexOf(\"drops-option\") > -1) {\r\n                this.set(e.target.dataset.value);\r\n                this.close();\r\n            }\r\n        });\r\n\r\n        //\r\n        // Query input\r\n        //\r\n\r\n        if (this.elements.queryInput) {\r\n\r\n            // Filter on input\r\n            this.elements.queryInput.addEventListener(\"input\", debounce(this.options.queryDebounce, () => {\r\n                this.options.query(\r\n                    this,\r\n                    this.elements.options.querySelectorAll(\".drops-option\"),\r\n                    this.elements.queryInput.value\r\n                );\r\n            }));\r\n\r\n            // Focus on open\r\n            this.on(\"opened\", () => {\r\n                this.elements.queryInput.focus();\r\n            });\r\n        }\r\n    }\r\n\r\n    /*\r\n     -------------------------------\r\n     Option management\r\n     -------------------------------\r\n     */\r\n\r\n    getOptionData(value) {\r\n        var option = this.elements.options.querySelector(`.drops-option[data-value='${value}']`);\r\n        return option ? option.dataset : null;\r\n    }\r\n\r\n    setOptions(options, silent = false) {\r\n        // Clear selection\r\n        this.set(null, true);\r\n\r\n        // Clear current options\r\n        this.elements.input.innerHTML = \"\";\r\n        this.elements.options.innerHTML = \"\";\r\n\r\n        // Push placeholder input option\r\n        var placeholder = document.createElement(\"option\");\r\n        placeholder.value = \"\";\r\n        placeholder.innerText = this.options.placeholder;\r\n        this.elements.input.appendChild(placeholder);\r\n\r\n        // Build options\r\n        var selection;\r\n\r\n        options.forEach((optionData) => {\r\n            if ((typeof optionData.value !== \"string\") || (optionData.value.length === 0)) {\r\n                return;\r\n            }\r\n\r\n            if (!optionData.label) {\r\n                optionData.label = optionData.value;\r\n            }\r\n\r\n            // Create input option\r\n            var inputOption = document.createElement(\"option\");\r\n            inputOption.value = optionData.value;\r\n            inputOption.innerText = optionData.label;\r\n            this.elements.input.appendChild(inputOption);\r\n\r\n            // Create option\r\n            var option = document.createElement(\"div\");\r\n            option.className = \"drops-option\";\r\n            option.innerHTML = this.options.getOption(optionData);\r\n\r\n            Object.keys(optionData).forEach((key) => {\r\n                option.dataset[key] = optionData[key];\r\n            });\r\n\r\n            this.elements.options.appendChild(option);\r\n\r\n            // Select if selected\r\n            if (optionData.selected) {\r\n                selection = optionData.value;\r\n            }\r\n        });\r\n\r\n        // Set selection\r\n        this.set(selection, silent);\r\n    }\r\n\r\n    /*\r\n     -------------------------------\r\n     Value\r\n     -------------------------------\r\n     */\r\n\r\n    [symbols.setValue](value) {\r\n        if (this.get() === value) {\r\n            return false;\r\n        }\r\n\r\n        // Get option\r\n        var option;\r\n\r\n        if ((value != null) && (value.length > 0)) {\r\n            option = this.elements.options.querySelector(`.drops-option[data-value='${value}']`);\r\n\r\n            if (!option) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // Clear current selection\r\n        var current = this.elements.options.querySelector(\".drops-option.drops-selected\");\r\n\r\n        if (current) {\r\n            var currentClasses = current.className.split(\" \"),\r\n                selectedIndex = currentClasses.indexOf(\"drops-selected\");\r\n\r\n            currentClasses.splice(selectedIndex, 1);\r\n            current.className = currentClasses.join(\" \");\r\n            current.dataset.selected = false;\r\n        }\r\n\r\n        // Clear input selection\r\n        this.elements.input.value = \"\";\r\n\r\n        // Set new selection\r\n        if (option) {\r\n            option.className += \" drops-selected\";\r\n            option.dataset.selected = true;\r\n            this.elements.input.value = value;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n}","/*\r\n |--------------------------------------------------------------------------\r\n | Drops\r\n |--------------------------------------------------------------------------\r\n |\r\n |\r\n |\r\n */\r\n\r\nimport Field from \"./Field\";\r\nimport Select from \"./Select\";\r\nimport {create, register, instance} from \"./manager\";\r\nimport symbols from \"./symbols\";\r\n\r\n(function (root, factory) {\r\n    var drops = factory();\r\n\r\n    // Common JS (since this is browserify it's fair to export all the time)\r\n    module.exports = drops;\r\n\r\n    // AMD\r\n    if (typeof define === \"function\" && define.amd) {\r\n        define(() => {\r\n            return drops;\r\n        });\r\n    }\r\n\r\n    // Window\r\n    else {\r\n        root.drops = drops;\r\n    }\r\n\r\n})(window || global, function () {\r\n\r\n    // Push bundled fields\r\n    register(\"select\", Select);\r\n\r\n    // Export\r\n    return {\r\n        Field: Field,\r\n        Select: Select,\r\n        create: create,\r\n        register: register,\r\n        instance: instance,\r\n        symbols: symbols\r\n    };\r\n});","/*\r\n |--------------------------------------------------------------------------\r\n | Field manager (create and retrieve instances)\r\n |--------------------------------------------------------------------------\r\n |\r\n |\r\n |\r\n */\r\n\r\nimport WeakMap from \"es6-weak-map\";\r\n\r\n//\r\n// Locals\r\n//\r\n\r\nvar instances = new WeakMap(),\r\n    types = {};\r\n\r\n//\r\n// Register a new type of field\r\n//\r\n\r\nexport function register(typeName, typeClass) {\r\n    types[typeName] = typeClass;\r\n}\r\n\r\n//\r\n// Creates a new field instance\r\n//\r\n\r\nexport function create(type, element, options = {}) {\r\n    // Check if already an instance\r\n    if (instances.get(element)) {\r\n        throw new Error(\"A field instance already exists on the element!\");\r\n        return;\r\n    }\r\n\r\n    // Check class\r\n    if (!types[type]) {\r\n        throw new Error(\"The type could not be found!\");\r\n        return;\r\n    }\r\n\r\n    var instance = new types[type](element, options);\r\n    instances.set(element, instance);\r\n\r\n    return instance;\r\n}\r\n\r\n//\r\n// Retrieves an instance for a specific element\r\n//\r\n\r\nexport function instance(element) {\r\n    return instances.get(element);\r\n}\r\n","/*\r\n |--------------------------------------------------------------------------\r\n | Symbols used in the field class\r\n |--------------------------------------------------------------------------\r\n |\r\n |\r\n |\r\n */\r\n\r\nimport Symbol from \"es6-symbol\";\r\n\r\nexport const initializeOptions = Symbol(\"initializeOptions\");\r\nexport const initializeView = Symbol(\"initializeView\");\r\nexport const initializeEvents = Symbol(\"initializeEvents\");\r\nexport const initializeState = Symbol(\"initializeState\");\r\nexport const setSelection = Symbol(\"setSelection\");\r\nexport const clearSelection = Symbol(\"clearSelection\");\r\nexport const setValue = Symbol(\"setValue\");\r\nexport const getValue = Symbol(\"getValue\");","/**\r\n * Debounces a function\r\n *\r\n * @param {int} timeout\r\n * @param {Function} callback\r\n * @returns {Function}\r\n */\r\n\r\nexport function debounce(timeout, callback) {\r\n    var timer;\r\n\r\n    return function () {\r\n        var args = arguments;\r\n\r\n        if (timer) {\r\n            clearTimeout(timer);\r\n            timer = null;\r\n        }\r\n\r\n        timer = setTimeout(() => {\r\n            timer = null;\r\n            callback.apply(this, args);\r\n\r\n        }, timeout);\r\n    };\r\n}\r\n\r\n/**\r\n * Adds a listener that triggers once on a specific element\r\n *\r\n * @param element\r\n * @param eventName\r\n * @param callback\r\n */\r\n\r\nexport function listenOnce(element, eventName, callback) {\r\n    function callbackWrapper() {\r\n        element.removeEventListener(eventName, callbackWrapper);\r\n        callback.apply(this, arguments);\r\n    }\r\n\r\n    element.addEventListener(eventName, callbackWrapper);\r\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}